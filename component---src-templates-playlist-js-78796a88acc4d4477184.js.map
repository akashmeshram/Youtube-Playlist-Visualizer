{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/videotrack.js","webpack:///./src/templates/playlist.js"],"names":["children","className","styles","layout","to","href","foot","target","rel","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","props","item","video","src","thumbnail","alt","title","tooltiptext","data","music","file","childrenPlaylist","filter","node","status","privacyStatus","playlistname","name","container","map","contentDetails","videoId","snippet","pic","thumbnails","medium","url","query"],"mappings":"2FAAA,0DAIe,gBAAiB,IAAfA,EAAc,EAAdA,SACf,OACE,yBAAKC,UAAWC,IAAOC,QACrB,kBAAC,IAAD,CAAMC,GAAI,KAAK,4DACdJ,EACD,uBAAGK,KAAK,kCAAkCJ,UAAWC,IAAOI,KAAOC,OAAO,SAAUC,IAAI,uBAAxF,wB,kCCTN,sGAcyBC,QAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV,O,6GCJI,WAACC,GACd,OACI,yBAAKvB,UAAWC,IAAOuB,MACnB,uBAAGpB,KAAMmB,EAAME,MAAQnB,OAAO,SAAUC,IAAI,uBAC1C,yBAAKmB,IAAKH,EAAMI,UAAWC,IAAKL,EAAMM,SAExC,2BACE,uBAAGzB,KAAMmB,EAAME,MAAQnB,OAAO,SAAUC,IAAI,uBAAuBgB,EAAMM,OACzE,0BAAM7B,UAAWC,IAAO6B,aAAcP,EAAMM,U,sCCLzC,sBAAe,IAAZE,EAAW,EAAXA,KACVC,EAAQD,EAAKE,KAAKC,iBAAiBC,QAAO,SAAAC,GAAI,MAAkC,WAA9BA,EAAKC,OAAOC,iBAEpE,OACE,kBAAC,IAAD,KACE,wBAAItC,UAAWC,IAAOsC,cAAeR,EAAKE,KAAKO,MAC/C,yBAAKxC,UAAWC,IAAOwC,WACpBT,EAAMU,KAAI,SAACN,GACV,IAAMhC,EAAO,mCAAqCgC,EAAKO,eAAeC,QAChEJ,EAAOJ,EAAKS,QAAQhB,MACpBiB,EAAMV,EAAKS,QAAQE,WAAWC,OAAOC,IAC3C,OACE,kBAAC,EAAD,CAAYxB,MAAOrB,EAAMyB,MAAOW,EAAMb,UAAWmB,UAZ9C,IAoBFI,EAAK","file":"component---src-templates-playlist-js-78796a88acc4d4477184.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport styles from \"../styles/main.module.css\"\r\n\r\nexport default ({children}) => {  \r\n  return (\r\n    <div className={styles.layout}>\r\n      <Link to={\"/\"}><h1>Youtube Playlist visualizer</h1></Link>\r\n      {children}\r\n      <a href=\"https://akashmeshram.github.io/\" className={styles.foot}  target=\"_blank\"  rel=\"noopener noreferrer\"> By Akash Meshram</a>\r\n    </div> \r\n  ) \r\n}\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\r\nimport styles from \"../styles/playlist.module.css\"\r\n\r\nexport default (props) => {  \r\n  return (\r\n      <div className={styles.item}>\r\n          <a href={props.video}  target=\"_blank\"  rel=\"noopener noreferrer\">\r\n            <img src={props.thumbnail} alt={props.title}/>        \r\n          </a>\r\n          <p>\r\n            <a href={props.video}  target=\"_blank\"  rel=\"noopener noreferrer\">{props.title}</a>\r\n            <span className={styles.tooltiptext}>{props.title}</span>\r\n          </p>           \r\n      </div>\r\n    \r\n  ) \r\n}\r\n","import React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport Videotrack from \"../components/videotrack\"\r\nimport { graphql } from \"gatsby\"\r\nimport styles from \"../styles/playlist.module.css\"\r\n\r\nexport default ({ data }) => {\r\n  const music = data.file.childrenPlaylist.filter(node => node.status.privacyStatus === \"public\")\r\n\r\n  return (\r\n    <Layout>\r\n      <h2 className={styles.playlistname}>{data.file.name}</h2>\r\n      <div className={styles.container}>\r\n        {music.map((node) => {\r\n          const href = \"https://www.youtube.com/watch?v=\" + node.contentDetails.videoId\r\n          const name = node.snippet.title\r\n          const pic = node.snippet.thumbnails.medium.url\r\n          return (\r\n            <Videotrack video={href} title={name} thumbnail={pic}/>\r\n          )\r\n        })}\r\n      </div>      \r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    file(fields: {slug: {eq: $slug}}) {\r\n      childrenPlaylist {\r\n        snippet {\r\n          title\r\n          thumbnails {\r\n            medium {\r\n              url\r\n            }\r\n          }\r\n        }\r\n        id\r\n        contentDetails {\r\n          videoId\r\n        }\r\n        status {\r\n          privacyStatus\r\n        }\r\n      }\r\n      name\r\n    }\r\n  }\r\n`"],"sourceRoot":""}